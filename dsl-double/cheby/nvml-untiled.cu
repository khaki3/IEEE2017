/* -------------------------------------------------------
   UNTILED CODE GENERATED BY FORMA COMPILER
   ---------------------------------------------------------*/

#include "cuda.h"
#ifdef _TIMER_
#include "cuda_profiler_api.h"
#endif
#include "stdio.h"
#include <nvml.h>
#include <assert.h>


#define FORMA_MAX(a,b) ( (a) > (b) ? (a) : (b) )
#define max(a,b) FORMA_MAX(a,b)
#define FORMA_MIN(a,b) ( (a) < (b) ? (a) : (b) )
#define min(a,b) FORMA_MIN(a,b)
#define FORMA_CEIL(a,b) ( (a) % (b) == 0 ? (a) / (b) : ((a) / (b)) + 1 )

#ifndef FORMA_MAX_BLOCKDIM_0
#define FORMA_MAX_BLOCKDIM_0 1024
#endif
#ifndef FORMA_MAX_BLOCKDIM_1
#define FORMA_MAX_BLOCKDIM_1 1024
#endif
#ifndef FORMA_MAX_BLOCKDIM_2
#define FORMA_MAX_BLOCKDIM_2 1024
#endif
	template<typename T>
__global__ void  __kernel_init__(T* input, T value)
{
	int loc = (int)(blockIdx.x)*(int)(blockDim.x)+(int)(threadIdx.x);
	input[loc] = value;
}


	template<typename T>
void initialize_array(T* d_input, int size, T value)
{
	dim3 init_grid(FORMA_CEIL(size,FORMA_MAX_BLOCKDIM_0));
	dim3 init_block(FORMA_MAX_BLOCKDIM_0);
	__kernel_init__<<<init_grid,init_block>>>(d_input,value);
}


void Check_CUDA_Error(const char* message);
/*Texture references */
/* Device code Begin */
__global__ void __kernel___forma_kernel__0__(double h2inv, double c1, double c2, double * __restrict__ RHS, double * __restrict__ Ap, double * __restrict__ Dinv, double * __restrict__ Ac, int L, int M, int N, double * __restrict__ __var_2__){
	int FORMA_BLOCKDIM_Z = (int)(blockDim.z);
	int FORMA_BLOCKDIM_Y = (int)(blockDim.y);
	int FORMA_BLOCKDIM_X = (int)(blockDim.x);
	int __iter_0__;
	__iter_0__ = (int)(blockIdx.x)*(int)(FORMA_BLOCKDIM_X) + (int)(threadIdx.x) + 1;
	if(__iter_0__ <= (N-2)){
		int __iter_1__;
		__iter_1__ = (int)(blockIdx.y)*(int)(FORMA_BLOCKDIM_Y) + (int)(threadIdx.y) + 1;
		if(__iter_1__ <= (M-2)){
			int __iter_2__;
			__iter_2__ = (int)(blockIdx.z)*(int)(FORMA_BLOCKDIM_Z) + (int)(threadIdx.z) + 1;
			if(__iter_2__ <= (L-2)){
				double __temp_0__;
				__temp_0__ = (Ac[__iter_0__+N*(__iter_1__+M*(__iter_2__))] - Ap[__iter_0__+N*(__iter_1__+M*(__iter_2__))]);
				double __temp_1__;
				__temp_1__ = (c1 * __temp_0__);
				double __temp_2__;
				__temp_2__ = (Ac[__iter_0__+N*(__iter_1__+M*(__iter_2__))] + __temp_1__);
				double __temp_3__;
				__temp_3__ = (c2 * Dinv[__iter_0__+N*(__iter_1__+M*(__iter_2__))]);
				double __temp_4__;
				__temp_4__ = (Ac[__iter_0__+(-1)+N*(__iter_1__+(-1)+M*(__iter_2__+(-1)))] + Ac[__iter_0__+(1)+N*(__iter_1__+(-1)+M*(__iter_2__+(-1)))]);
				double __temp_5__;
				__temp_5__ = (__temp_4__ + Ac[__iter_0__+(-1)+N*(__iter_1__+(1)+M*(__iter_2__+(-1)))]);
				double __temp_6__;
				__temp_6__ = (__temp_5__ + Ac[__iter_0__+(1)+N*(__iter_1__+(1)+M*(__iter_2__+(-1)))]);
				double __temp_7__;
				__temp_7__ = (__temp_6__ + Ac[__iter_0__+(-1)+N*(__iter_1__+(-1)+M*(__iter_2__+(1)))]);
				double __temp_8__;
				__temp_8__ = (__temp_7__ + Ac[__iter_0__+(1)+N*(__iter_1__+(-1)+M*(__iter_2__+(1)))]);
				double __temp_9__;
				__temp_9__ = (__temp_8__ + Ac[__iter_0__+(-1)+N*(__iter_1__+(1)+M*(__iter_2__+(1)))]);
				double __temp_10__;
				__temp_10__ = (__temp_9__ + Ac[__iter_0__+(1)+N*(__iter_1__+(1)+M*(__iter_2__+(1)))]);
				double __temp_11__;
				__temp_11__ = (0.030000f * __temp_10__);
				double __temp_12__;
				__temp_12__ = (Ac[__iter_0__+N*(__iter_1__+(-1)+M*(__iter_2__+(-1)))] + Ac[__iter_0__+(-1)+N*(__iter_1__+M*(__iter_2__+(-1)))]);
				double __temp_13__;
				__temp_13__ = (__temp_12__ + Ac[__iter_0__+(1)+N*(__iter_1__+M*(__iter_2__+(-1)))]);
				double __temp_14__;
				__temp_14__ = (__temp_13__ + Ac[__iter_0__+N*(__iter_1__+(1)+M*(__iter_2__+(-1)))]);
				double __temp_15__;
				__temp_15__ = (__temp_14__ + Ac[__iter_0__+(-1)+N*(__iter_1__+(-1)+M*(__iter_2__))]);
				double __temp_16__;
				__temp_16__ = (__temp_15__ + Ac[__iter_0__+(1)+N*(__iter_1__+(-1)+M*(__iter_2__))]);
				double __temp_17__;
				__temp_17__ = (__temp_16__ + Ac[__iter_0__+(-1)+N*(__iter_1__+(1)+M*(__iter_2__))]);
				double __temp_18__;
				__temp_18__ = (__temp_17__ + Ac[__iter_0__+(1)+N*(__iter_1__+(1)+M*(__iter_2__))]);
				double __temp_19__;
				__temp_19__ = (__temp_18__ + Ac[__iter_0__+N*(__iter_1__+(-1)+M*(__iter_2__+(1)))]);
				double __temp_20__;
				__temp_20__ = (__temp_19__ + Ac[__iter_0__+(-1)+N*(__iter_1__+M*(__iter_2__+(1)))]);
				double __temp_21__;
				__temp_21__ = (__temp_20__ + Ac[__iter_0__+(1)+N*(__iter_1__+M*(__iter_2__+(1)))]);
				double __temp_22__;
				__temp_22__ = (__temp_21__ + Ac[__iter_0__+N*(__iter_1__+(1)+M*(__iter_2__+(1)))]);
				double __temp_23__;
				__temp_23__ = (0.100000f * __temp_22__);
				double __temp_24__;
				__temp_24__ = (__temp_11__ + __temp_23__);
				double __temp_25__;
				__temp_25__ = (Ac[__iter_0__+N*(__iter_1__+M*(__iter_2__+(-1)))] + Ac[__iter_0__+N*(__iter_1__+(-1)+M*(__iter_2__))]);
				double __temp_26__;
				__temp_26__ = (__temp_25__ + Ac[__iter_0__+(-1)+N*(__iter_1__+M*(__iter_2__))]);
				double __temp_27__;
				__temp_27__ = (__temp_26__ + Ac[__iter_0__+(1)+N*(__iter_1__+M*(__iter_2__))]);
				double __temp_28__;
				__temp_28__ = (__temp_27__ + Ac[__iter_0__+N*(__iter_1__+(1)+M*(__iter_2__))]);
				double __temp_29__;
				__temp_29__ = (__temp_28__ + Ac[__iter_0__+N*(__iter_1__+M*(__iter_2__+(1)))]);
				double __temp_30__;
				__temp_30__ = (0.460000f * __temp_29__);
				double __temp_31__;
				__temp_31__ = (__temp_24__ + __temp_30__);
				double __temp_32__;
				__temp_32__ = (4.260000f * Ac[__iter_0__+N*(__iter_1__+M*(__iter_2__))]);
				double __temp_33__;
				__temp_33__ = (__temp_31__ - __temp_32__);
				double __temp_34__;
				__temp_34__ = (h2inv * __temp_33__);
				double __temp_35__;
				__temp_35__ = (Ac[__iter_0__+N*(__iter_1__+M*(__iter_2__))] - __temp_34__);
				double __temp_36__;
				__temp_36__ = (RHS[__iter_0__+N*(__iter_1__+M*(__iter_2__))] - __temp_35__);
				double __temp_37__;
				__temp_37__ = (__temp_3__ * __temp_36__);
				double __temp_38__;
				__temp_38__ = (__temp_2__ + __temp_37__);
				__var_2__[__iter_0__+N*(__iter_1__+M*(__iter_2__))] = __temp_38__;
			}
		}
	}
}

/*Device code End */
/* Host Code Begin */
extern "C" void host_code (double * h_Ac, double * h_Ap, double * h_Dinv,  double * h_RHS, double * __var_0__, double * c1, double * c2, double h2inv, int L, int M, int N) {
	/* Host allocation Begin */
	double * Ac;
	cudaMalloc(&Ac,sizeof(double)*(L*M*N));
	Check_CUDA_Error("Allocation Error!! : Ac\n");
	cudaMemcpy(Ac,h_Ac,sizeof(double)*(L*M*N), cudaMemcpyHostToDevice);
	double * Ap;
	cudaMalloc(&Ap,sizeof(double)*(L*M*N));
	Check_CUDA_Error("Allocation Error!! : Ap\n");
	cudaMemcpy(Ap,h_Ap,sizeof(double)*(L*M*N), cudaMemcpyHostToDevice);
	double * Dinv;
	cudaMalloc(&Dinv,sizeof(double)*(L*M*N));
	Check_CUDA_Error("Allocation Error!! : Dinv\n");
	cudaMemcpy(Dinv,h_Dinv,sizeof(double)*(L*M*N), cudaMemcpyHostToDevice);
	double * RHS;
	cudaMalloc(&RHS,sizeof(double)*(L*M*N));
	Check_CUDA_Error("Allocation Error!! : RHS\n");
	cudaMemcpy(RHS,h_RHS,sizeof(double)*(L*M*N), cudaMemcpyHostToDevice);
	double * __var_1__;
	cudaMalloc(&__var_1__,sizeof(double)*(L*M*N));
	Check_CUDA_Error("Allocation Error!! : __var_1__\n");
	double * __var_2__;
	cudaMalloc(&__var_2__,sizeof(double)*(L*M*N));
	Check_CUDA_Error("Allocation Error!! : __var_2__\n");
	double * __var_3__;
	cudaMalloc(&__var_3__,sizeof(double)*(L*M*N));
	Check_CUDA_Error("Allocation Error!! : __var_3__\n");
	double * __var_4__;
	cudaMalloc(&__var_4__,sizeof(double)*(L*M*N));
	Check_CUDA_Error("Allocation Error!! : __var_4__\n");
	/*Host Allocation End */
	/* Kernel Launch Begin */
#ifdef _TIMER_
	cudaEvent_t _forma_timer_start_,_forma_timer_stop_;
	cudaEventCreate(&_forma_timer_start_);
	cudaEventCreate(&_forma_timer_stop_);
	cudaEventRecord(_forma_timer_start_,0);
#endif
	int __size_0___kernel___forma_kernel__0__ = ((N-2) - 1 ) + 1;
	int __size_1___kernel___forma_kernel__0__ = ((M-2) - 1 ) + 1;
	int __size_2___kernel___forma_kernel__0__ = ((L-2) - 1 ) + 1;
	dim3 blockConfig (16,4,4);
	int __grid_0___kernel___forma_kernel__0__ = FORMA_CEIL(__size_0___kernel___forma_kernel__0__,16);
	int __grid_1___kernel___forma_kernel__0__ = FORMA_CEIL(__size_1___kernel___forma_kernel__0__,4);
	int __grid_2___kernel___forma_kernel__0__ = FORMA_CEIL(__size_2___kernel___forma_kernel__0__,4);
	dim3 __gridConfig___kernel___forma_kernel__0__(__grid_0___kernel___forma_kernel__0__,__grid_1___kernel___forma_kernel__0__,__grid_2___kernel___forma_kernel__0__);

	unsigned int power1, power2;
	nvmlReturn_t result;
	nvmlDevice_t device;
	nvmlEnableState_t mode;
	result=nvmlInit();
	result = nvmlDeviceGetHandleByIndex(0, &device);
	assert(NVML_SUCCESS == result);
	result=nvmlDeviceGetPowerManagementMode(device, &mode);
	printf("enabled = %d\n", mode);
	result=nvmlDeviceGetPowerUsage(device,&power1);
	assert(NVML_SUCCESS == result);
	cudaDeviceSynchronize();

	for (int x=0; x<500; x++) {

		__kernel___forma_kernel__0__<<<__gridConfig___kernel___forma_kernel__0__, blockConfig>>> (h2inv, c1[0], c2[0], RHS, Ap, Dinv, Ac, L, M, N, __var_2__);
		__kernel___forma_kernel__0__<<<__gridConfig___kernel___forma_kernel__0__, blockConfig>>> (h2inv, c1[1], c2[1], RHS, Ac, Dinv, __var_2__, L, M, N, __var_3__);
		__kernel___forma_kernel__0__<<<__gridConfig___kernel___forma_kernel__0__, blockConfig>>> (h2inv, c1[2], c2[2], RHS, __var_2__, Dinv, __var_3__, L, M, N, __var_4__);
		__kernel___forma_kernel__0__<<<__gridConfig___kernel___forma_kernel__0__, blockConfig>>> (h2inv, c1[3], c2[3], RHS, __var_3__, Dinv, __var_4__, L, M, N, __var_1__);
		Check_CUDA_Error("Kernel Launch Error!! : __kernel___forma_kernel__0__\n");
	}

	cudaDeviceSynchronize();
	result=nvmlDeviceGetPowerUsage(device,&power2);
	assert(NVML_SUCCESS == result);
	power2 -= power1;
	printf("%u\n", power2);
	nvmlShutdown();
	cudaPointerAttributes ptrAttrib___var_0__;
	cudaMemcpyKind memcpy_kind___var_0__ = cudaMemcpyDeviceToHost;
	if (cudaPointerGetAttributes(&ptrAttrib___var_0__, __var_0__) == cudaSuccess)
		if (ptrAttrib___var_0__.memoryType == cudaMemoryTypeDevice)
			memcpy_kind___var_0__ = cudaMemcpyDeviceToDevice;
	cudaGetLastError();
	cudaMemcpy(__var_0__,__var_1__, sizeof(double)*(L*M*N), memcpy_kind___var_0__);
#ifdef _TIMER_
	cudaEventRecord(_forma_timer_stop_,0);
	cudaEventSynchronize(_forma_timer_stop_);
	float elapsedTime;
	cudaEventElapsedTime(&elapsedTime,_forma_timer_start_,_forma_timer_stop_);
	printf("[FORMA] Computation Time(ms) : %lf\n",elapsedTime);
	cudaEventDestroy(_forma_timer_start_);
	cudaEventDestroy(_forma_timer_stop_);
#endif
	/*Kernel Launch End */
	/* Host Free Begin */
	cudaFree(Ac);
	cudaFree(Ap);
	cudaFree(Dinv);
	cudaFree(RHS);
	cudaFree(__var_1__);
	cudaFree(__var_2__);
	cudaFree(__var_3__);
	cudaFree(__var_4__);
}
/*Host Free End*/
